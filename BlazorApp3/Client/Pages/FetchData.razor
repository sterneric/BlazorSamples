@* changed the page from /fetchdata to / so this page loads first*@
@page "/"
@implements IDisposable
@using BlazorApp3.Shared
@inject PersistentComponentState ApplicationState
@inject IWeatherForecastService WeatherForecastService

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private PersistingComponentStateSubscription _subscription;

    protected override async Task OnInitializedAsync()
    {
        _subscription = ApplicationState.RegisterOnPersisting(PersistForecasts);
        //if (ApplicationState.TryTakeFromJson<List<Recipe>>("recipes", out var storedRecipes))
        //{
        //    RecipeState.IndexRecipes = storedRecipes;           
        //} 

        if (ApplicationState.TryTakeFromJson<WeatherForecast[]>("fetchData", out var storedForecasts))
    { 
            forecasts = storedForecasts;
        }
        else
            forecasts = await WeatherForecastService.GetForecastAsync();
    }

    private Task PersistForecasts()
    {
        ApplicationState.PersistAsJson("fetchData", forecasts);

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        _subscription.Dispose();
    }



}
